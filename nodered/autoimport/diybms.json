{
  "id": "91ad451.f6e52b8",
  "label": "DIYBMS",
  "nodes": [
    {
      "id": "b8863f2ea4be2839",
      "type": "mqtt in",
      "z": "14c2db9cb30a00ac",
      "name": "",
      "topic": "diybms/#",
      "qos": "2",
      "datatype": "json",
      "broker": "bf885360.b5a32",
      "nl": false,
      "rap": true,
      "rh": 0,
      "x": 190,
      "y": 220,
      "wires": [["eb91e41fbc034189"]]
    },
    {
      "id": "56224882a31eb0c4",
      "type": "debug",
      "z": "14c2db9cb30a00ac",
      "name": "",
      "active": false,
      "tosidebar": true,
      "console": false,
      "tostatus": false,
      "complete": "false",
      "statusVal": "",
      "statusType": "auto",
      "x": 710,
      "y": 180,
      "wires": []
    },
    {
      "id": "eb91e41fbc034189",
      "type": "function",
      "z": "14c2db9cb30a00ac",
      "name": "",
      "func": "const topic = msg.topic.split('/');\nconst message = topic[1];\n\nvar measurement = null;\nvar retentionPolicy = null;\nvar expiry = \"\";\nvar tags = \"\";\nvar data = \"\";\n\nif (!isNaN(message)) {\n    measurement = \"series\";    \n    tags = {    bank: message,\n                series: topic[2].padStart(2, \"0\")\n            };\n    data = {    voltage: msg.payload.voltage,\n                vMax: msg.payload.vMax,\n                vMin: msg.payload.vMin,\n                inttemp: msg.payload.inttemp,\n                exttemp: msg.payload.exttemp,\n                bypass: msg.payload.bypass,\n                PWM: msg.payload.PWM,\n                bypassT: msg.payload.bypassT,\n                bpc: msg.payload.bpc,\n                mAh: msg.payload.mAh\n            };\n} else if (message == 'status') {\n    measurement = \"status\";\n    tags = {};\n    data = {    banks: msg.payload.banks,\n                cells: msg.payload.cells,\n                uptime: msg.payload.uptime,\n                commserr: msg.payload.commserr,\n                sent: msg.payload.sent,\n                received: msg.payload.received,\n                badcrc: msg.payload.badcrc,\n                ignored: msg.payload.ignored,\n                oos: msg.payload.oos,\n                roundtrip: msg.payload.roundtrip\n            };\n} else if (message == 'modbus') {\n    measurement = \"modbus\";\n    tags = {};\n    data = {    valid: msg.payload.valid,\n                voltage: msg.payload.voltage,\n                current: msg.payload.current,\n                mAhIn: msg.payload.mAhIn,\n                mAhOut: msg.payload.mAhOut,\n                power: msg.payload.power,\n                temperature: msg.payload.temperature,\n                shuntmV: msg.payload.shuntmV,\n                relayState: msg.payload.relayState\n            };\n} else if (message == 'bank') {\n    measurement = \"bank\";\n    tags = { bank: topic[2] };\n    data = { voltage: msg.payload.voltage };\n} else return;\n\nreturn {measurement: measurement, retentionPolicy: retentionPolicy, payload: [data, tags]};",
      "outputs": 1,
      "noerr": 0,
      "initialize": "",
      "finalize": "",
      "libs": [],
      "x": 400,
      "y": 220,
      "wires": [["56224882a31eb0c4", "4a165dc430f35817"]]
    },
    {
      "id": "4a165dc430f35817",
      "type": "influxdb out",
      "z": "14c2db9cb30a00ac",
      "influxdb": "639a2091622a1d6f",
      "name": "",
      "measurement": "",
      "precision": "",
      "retentionPolicy": "",
      "database": "",
      "retentionPolicyV18Flux": "",
      "org": "",
      "bucket": "",
      "x": 760,
      "y": 220,
      "wires": []
    },
    {
      "id": "09e042c1aeb68a37",
      "type": "comment",
      "z": "14c2db9cb30a00ac",
      "name": "Inject data into influxdb",
      "info": "",
      "x": 200,
      "y": 140,
      "wires": []
    },
    {
      "id": "bf885360.b5a32",
      "type": "mqtt-broker",
      "name": "",
      "broker": "mqtt",
      "port": "1883",
      "clientid": "",
      "usetls": false,
      "compatmode": false,
      "keepalive": "60",
      "cleansession": true,
      "birthTopic": "",
      "birthQos": "0",
      "birthPayload": "",
      "closeTopic": "",
      "closeQos": "0",
      "closePayload": "",
      "willTopic": "",
      "willQos": "0",
      "willPayload": ""
    }
  ],
  "configs": [
    {
      "id": "639a2091622a1d6f",
      "type": "influxdb",
      "hostname": "influxdb",
      "port": "8086",
      "protocol": "http",
      "database": "diybms",
      "name": "",
      "usetls": false,
      "tls": "",
      "influxdbVersion": "1.x",
      "url": "http://localhost:8086",
      "rejectUnauthorized": true
    }
  ]
}
